#tmpRow <- tmp[k,]
print(tmp[k,]$FixationTime)
#print(tmp[k,]$FixationTime)
#  if(tmp[k,]$FixationTime >= val$y){
#    tmpRow$Group = "Late"
#  } else{
#    tmpRow$Group = "Early"
#  }
#  out <- rbind(out, tmpRow)
}
}
out <- data.frame(matrix(0,nrow=0,ncol=length(colnames(cleanFix))+1))
colnames(out) <- c(colnames(cleanFix),"Group")
for(i in seq(0,1,0.1)){
cleanFix %>% filter(Prob == i) -> tmp
lin %>% filter(x == i) -> val
print(typeof(val$y))
for(k in 1:length(tmp$FixationTime)){
#print(tmp[k,]$FixationTime)
#print(tmp[k,]$FixationTime)
if(tmp[k,]$FixationTime >= val$y){
tmp[k,]$Group = "Late"
} else{
tmp[k,]$Group = "Early"
}
#  out <- rbind(out, tmpRow)
}
}
warnings()
out <- data.frame(matrix(0,nrow=0,ncol=length(colnames(cleanFix))+1))
colnames(out) <- c(colnames(cleanFix),"Group")
for(i in seq(0,1,0.1)){
cleanFix %>% filter(Prob == i) -> tmp
lin %>% filter(x == i) -> val
print(typeof(val$y))
for(k in 1:length(tmp$FixationTime)){
#print(tmp[k,]$FixationTime)
#print(tmp[k,]$FixationTime)
if(tmp[k,]$FixationTime >= val$y){
tmpout <- cbind(tmp[k,], data.frame(group="Late"))
} else{
tmpout <- cbind(tmp[k,], data.frame(group="Early"))
}
#  out <- rbind(out, tmpRow)
}
}
plotFixers <- groupFixers(cleanFix, lin)
print(val$y)
out <- data.frame(matrix(0,nrow=0,ncol=length(colnames(cleanFix))+1))
colnames(out) <- c(colnames(cleanFix),"Group")
for(i in seq(0,1,0.1)){
cleanFix %>% filter(Prob == i) -> tmp
lin %>% filter(x == i) -> val
print(val)
for(k in 1:length(tmp$FixationTime)){
#print(tmp[k,]$FixationTime)
#print(tmp[k,]$FixationTime)
if(tmp[k,]$FixationTime >= val$y){
tmpout <- cbind(tmp[k,], data.frame(group="Late"))
} else{
tmpout <- cbind(tmp[k,], data.frame(group="Early"))
}
#  out <- rbind(out, tmpRow)
}
}
out <- data.frame(matrix(0,nrow=0,ncol=length(colnames(cleanFix))+1))
colnames(out) <- c(colnames(cleanFix),"Group")
for(i in seq(0,1,0.1)){
cleanFix %>% filter(Prob == i) -> tmp
lin %>% filter(x == i) -> val
print(val)
print(tmp$Prob)
for(k in 1:length(tmp$FixationTime)){
#print(tmp[k,]$FixationTime)
#print(tmp[k,]$FixationTime)
if(tmp[k,]$FixationTime >= val$y){
tmpout <- cbind(tmp[k,], data.frame(group="Late"))
} else{
tmpout <- cbind(tmp[k,], data.frame(group="Early"))
}
#  out <- rbind(out, tmpRow)
}
}
out <- data.frame(matrix(0,nrow=0,ncol=length(colnames(cleanFix))+1))
colnames(out) <- c(colnames(cleanFix),"Group")
for(i in seq(0,1,0.1)){
cleanFix %>% filter(Prob == i) -> tmp
lin %>% filter(x == i) -> val
print(i)
print(val)
print(tmp$Prob)
for(k in 1:length(tmp$FixationTime)){
#print(tmp[k,]$FixationTime)
#print(tmp[k,]$FixationTime)
if(tmp[k,]$FixationTime >= val$y){
tmpout <- cbind(tmp[k,], data.frame(group="Late"))
} else{
tmpout <- cbind(tmp[k,], data.frame(group="Early"))
}
#  out <- rbind(out, tmpRow)
}
}
cleanFix
subset(cleanFix, cleanFix$Prob==0.3)
out <- data.frame(matrix(0,nrow=0,ncol=length(colnames(cleanFix))+1))
colnames(out) <- c(colnames(cleanFix),"Group")
for(i in seq(0,1,0.1)){
cleanFix %>% filter(Prob == i) -> tmp
lin %>% filter(x == i) -> val
print(i)
print(val)
print(tmp$Prob)
for(k in 1:length(tmp$FixationTime)){
#print(tmp[k,]$FixationTime)
#print(tmp[k,]$FixationTime)
if(tmp[k,]$FixationTime >= val$y){
tmpout <- cbind(tmp[k,], data.frame(group="Late"))
} else{
tmpout <- cbind(tmp[k,], data.frame(group="Early"))
}
#  out <- rbind(out, tmpRow)
}
}
library(ggplot2)
library(gridExtra)
library(dplyr)
cleanData <- function(df){
colnames(df) <- c("Replicate" ,"Prob","FixationTime" , "CellAge" , "TissueHeight" , "MeanRLambda", "EndTick", "TotalPop", "Frequency")
df$CellAge <- 0
df$FixationTime <- as.numeric(df$FixationTime)
df <- na.omit(df)
return(df)
}
sampleFixations <- function(df){
sampled <- data.frame(matrix(NA, nrow=0, ncol=length(colnames(df))))
colnames(sampled) <- colnames(df)
for(i in 1:length(unique(df$Prob))){
tmp <- subset(df, df$Prob==unique(df$Prob)[i])
for(k in 1:length(tmp$Frequency)){
if(tmp$Frequency[k]==1.00){
out <- tmp[k,]
sampled <- rbind(sampled,out)
}
}
}
return(sampled)
}
groupFixers <- function(df, lin){
out <- data.frame(matrix(0,nrow=0,ncol=length(colnames(df))+1))
colnames(out) <- c(colnames(df),"Group")
for(i in 1:length(unique(df$Prob))){
tmp <- subset(df, df$Prob==unique(df$Prob)[i])
val <- subset(lin, lin$x==unique(df$Prob)[i])
for(k in 1:length(tmp$FixationTime)){
tmpRow <- tmp[k,]
if(tmpRow$FixationTime>=val$y){
tmpRow$Group = "Late"
} else{
tmpRow$Group = "Early"
}
out <- rbind(out, tmpRow)
}
}
return(out)
}
setwd("/Users/schencro/Desktop/Darryl_collab/Framework/Homeostatic_Epidermis/FixationTesting/")
fixations <- read.csv("Results/MostRunSuccesses.txt", header = F, sep="\t", na.strings = c("na","NaN"))
fixations <- cleanData(fixations)
cleanFix <- sampleFixations(fixations)
sort(cleanFix$Prob)
sort(unique(cleanFix$Prob))
passed <- data.frame(matrix(NA, nrow=0, ncol=5))
colnames(passed) <- c("Prob","Passed","MeanFixation","StdFixation","Nums")
for(i in 1:length(unique(cleanFix$Prob))){
tmp <- subset(cleanFix, cleanFix$Prob==unique(cleanFix$Prob)[i])
probs <- unique(cleanFix$Prob)[i]
freqFix <- length(na.omit(tmp$FixationTime))/length(tmp$Prob)
fixTime <- mean(na.omit(tmp$FixationTime))
fixTimeSTD <- sd(na.omit(tmp$FixationTime))
totals <- length(na.omit(tmp$FixationTime))
outDF <- data.frame(Prob=probs,
Passed=freqFix,
MeanFixation=fixTime,
StdFixation=fixTimeSTD,
Nums=totals
)
passed <- rbind(passed, outDF)
}
passed
x = unique(as.numeric(cleanFix$Prob))
x
x = sort(x[x>0.1])
x
x = sort(x[x>0.1])
y = c(300,310,350,400,500,600,700,775,850)
nums <- seq(0.0,1.0,0.1)
fit <- lm(y~x)
line <- function(x){
y = fit$coefficients[2]*x + fit$coefficients[1]
return(y)
}
rm(line)
y = sapply(nums, FUN=function(x) fit$coefficients[2]*x+fit$coefficients[1])
lin = data.frame(x=nums,y=y)
out <- data.frame(matrix(0,nrow=0,ncol=length(colnames(cleanFix))+1))
colnames(out) <- c(colnames(cleanFix),"Group")
for(i in seq(0,1,0.1)){
cleanFix %>% filter(Prob == i) -> tmp
lin %>% filter(x == i) -> val
print(i)
print(val)
print(tmp$Prob)
for(k in 1:length(tmp$FixationTime)){
#print(tmp[k,]$FixationTime)
#print(tmp[k,]$FixationTime)
if(tmp[k,]$FixationTime >= val$y){
tmpout <- cbind(tmp[k,], data.frame(group="Late"))
} else{
tmpout <- cbind(tmp[k,], data.frame(group="Early"))
}
#  out <- rbind(out, tmpRow)
}
}
out <- data.frame(matrix(0,nrow=0,ncol=length(colnames(cleanFix))+1))
colnames(out) <- c(colnames(cleanFix),"Group")
cleanFix$Prob
for(i in seq(0,1,0.1)){
cleanFix %>% filter(Prob == i) -> tmp
lin %>% filter(x == i) -> val
print(i)
print(val)
print(unique(tmp$Prob))
for(k in 1:length(tmp$FixationTime)){
#print(tmp[k,]$FixationTime)
#print(tmp[k,]$FixationTime)
if(tmp[k,]$FixationTime >= val$y){
tmpout <- cbind(tmp[k,], data.frame(group="Late"))
} else{
tmpout <- cbind(tmp[k,], data.frame(group="Early"))
}
#  out <- rbind(out, tmpRow)
}
}
cleanFix$Prob
out <- data.frame(matrix(0,nrow=0,ncol=length(colnames(cleanFix))+1))
colnames(out) <- c(colnames(cleanFix),"Group")
cleanFix$Prob
for(i in seq(0,1,0.1)){
cleanFix %>% filter(Prob == i) -> tmp
lin %>% filter(x == i) -> val
print(i)
print(val)
print(typeof(unique(tmp$Prob)))
for(k in 1:length(tmp$FixationTime)){
#print(tmp[k,]$FixationTime)
#print(tmp[k,]$FixationTime)
if(tmp[k,]$FixationTime >= val$y){
tmpout <- cbind(tmp[k,], data.frame(group="Late"))
} else{
tmpout <- cbind(tmp[k,], data.frame(group="Early"))
}
#  out <- rbind(out, tmpRow)
}
}
out <- data.frame(matrix(0,nrow=0,ncol=length(colnames(cleanFix))+1))
colnames(out) <- c(colnames(cleanFix),"Group")
cleanFix$Prob
for(i in seq(0,1,0.1)){
cleanFix %>% filter(Prob == i) -> tmp
lin %>% filter(x == i) -> val
print(i)
print(val)
print(unique(tmp$Prob))
for(k in 1:length(tmp$FixationTime)){
#print(tmp[k,]$FixationTime)
#print(tmp[k,]$FixationTime)
if(tmp[k,]$FixationTime >= val$y){
tmpout <- cbind(tmp[k,], data.frame(group="Late"))
} else{
tmpout <- cbind(tmp[k,], data.frame(group="Early"))
}
#  out <- rbind(out, tmpRow)
}
}
out <- data.frame(matrix(0,nrow=0,ncol=length(colnames(cleanFix))+1))
colnames(out) <- c(colnames(cleanFix),"Group")
cleanFix$Prob
for(i in seq(0,1,0.1)){
cleanFix %>% filter(Prob == i) -> tmp
lin %>% filter(x == i) -> val
print(i)
print(val)
print(unique(tmp$Prob))
#for(k in 1:length(tmp$FixationTime)){
#print(tmp[k,]$FixationTime)
#print(tmp[k,]$FixationTime)
#  if(tmp[k,]$FixationTime >= val$y){
#    tmpout <- cbind(tmp[k,], data.frame(group="Late"))
#  } else{
#    tmpout <- cbind(tmp[k,], data.frame(group="Early"))
#  }
#  out <- rbind(out, tmpRow)
#}
}
p1 <- ggplot() +
#geom_violin(data=cleanFix, aes(x=Prob,y=FixationTime, group=Prob)) +
geom_line (data=lin, aes(x=x,y=y), alpha=0.2, inherit.aes=F) +
geom_point(data=cleanFix, aes(x=Prob,y=FixationTime), size=0.9, alpha=0.4, inherit.aes = F) +
#geom_point(data=passed, aes(x=as.factor(Prob),y=MeanFixation), color="red") +
#geom_errorbar(data=passed, aes(x=as.factor(Prob),ymin=MeanFixation-StdFixation, ymax=MeanFixation+StdFixation), color="red",width=.01, position=pd, inherit.aes = F) +
ylab("Time to Fixation (days)") + xlab("fzero (1-fp)") + theme_minimal() +
scale_x_continuous(breaks=unique(cleanFix$Prob))
p1
cleanData <- function(df){
colnames(df) <- c("Replicate" ,"Prob","FixationTime" , "CellAge" , "TissueHeight" , "MeanRLambda", "EndTick", "TotalPop", "Frequency")
df$CellAge <- 0
df$FixationTime <- as.numeric(df$FixationTime)
df <- na.omit(df)
return(df)
}
sampleFixations <- function(df){
sampled <- data.frame(matrix(NA, nrow=0, ncol=length(colnames(df))))
colnames(sampled) <- colnames(df)
for(i in 1:length(unique(df$Prob))){
tmp <- subset(df, df$Prob==unique(df$Prob)[i])
for(k in 1:length(tmp$Frequency)){
if(tmp$Frequency[k]==1.00){
out <- tmp[k,]
sampled <- rbind(sampled,out)
}
}
}
return(sampled)
}
groupFixers <- function(df, lin){
out <- data.frame(matrix(0,nrow=0,ncol=length(colnames(df))+1))
colnames(out) <- c(colnames(df),"Group")
for(i in 1:length(unique(df$Prob))){
tmp <- subset(df, df$Prob==unique(df$Prob)[i])
val <- subset(lin, lin$x==unique(df$Prob)[i])
for(k in 1:length(tmp$FixationTime)){
tmpRow <- tmp[k,]
if(tmpRow$FixationTime>=val$y){
tmpRow$Group = "Late"
} else{
tmpRow$Group = "Early"
}
out <- rbind(out, tmpRow)
}
}
return(out)
}
setwd("/Users/schencro/Desktop/Darryl_collab/Framework/Homeostatic_Epidermis/FixationTesting/")
fixations <- read.csv("Results/MostRunSuccesses.txt", header = F, sep="\t", na.strings = c("na","NaN"))
fixations <- cleanData(fixations)
cleanFix <- sampleFixations(fixations)
p1 <- ggplot() +
#geom_violin(data=cleanFix, aes(x=Prob,y=FixationTime, group=Prob)) +
geom_line (data=lin, aes(x=x,y=y), alpha=0.2, inherit.aes=F) +
geom_point(data=cleanFix, aes(x=Prob,y=FixationTime), size=0.9, alpha=0.4, inherit.aes = F) +
#geom_point(data=passed, aes(x=as.factor(Prob),y=MeanFixation), color="red") +
#geom_errorbar(data=passed, aes(x=as.factor(Prob),ymin=MeanFixation-StdFixation, ymax=MeanFixation+StdFixation), color="red",width=.01, position=pd, inherit.aes = F) +
ylab("Time to Fixation (days)") + xlab("fzero (1-fp)") + theme_minimal() +
scale_x_continuous(breaks=unique(cleanFix$Prob))
p1 <- ggplot() +
#geom_violin(data=cleanFix, aes(x=Prob,y=FixationTime, group=Prob)) +
#geom_line (data=lin, aes(x=x,y=y), alpha=0.2, inherit.aes=F) +
geom_point(data=cleanFix, aes(x=Prob,y=FixationTime), size=0.9, alpha=0.4, inherit.aes = F) +
#geom_point(data=passed, aes(x=as.factor(Prob),y=MeanFixation), color="red") +
#geom_errorbar(data=passed, aes(x=as.factor(Prob),ymin=MeanFixation-StdFixation, ymax=MeanFixation+StdFixation), color="red",width=.01, position=pd, inherit.aes = F) +
ylab("Time to Fixation (days)") + xlab("fzero (1-fp)") + theme_minimal() +
scale_x_continuous(breaks=unique(cleanFix$Prob))
p1
typeof(cleanFix$Prob)
passed <- data.frame(matrix(NA, nrow=0, ncol=5))
colnames(passed) <- c("Prob","Passed","MeanFixation","StdFixation","Nums")
for(i in 1:length(unique(cleanFix$Prob))){
tmp <- subset(cleanFix, cleanFix$Prob==unique(cleanFix$Prob)[i])
probs <- unique(cleanFix$Prob)[i]
freqFix <- length(na.omit(tmp$FixationTime))/length(tmp$Prob)
fixTime <- mean(na.omit(tmp$FixationTime))
fixTimeSTD <- sd(na.omit(tmp$FixationTime))
totals <- length(na.omit(tmp$FixationTime))
outDF <- data.frame(Prob=probs,
Passed=freqFix,
MeanFixation=fixTime,
StdFixation=fixTimeSTD,
Nums=totals
)
passed <- rbind(passed, outDF)
}
passed
x = unique(as.numeric(cleanFix$Prob))
x = sort(x[x>0.1])
y = c(300,310,350,400,500,600,700,775,850)
nums <- seq(0.0,1.0,0.1)
fit <- lm(y~x)
y = sapply(nums, FUN=function(x) fit$coefficients[2]*x+fit$coefficients[1])
lin = data.frame(x=nums,y=y)
plot(lin)
for(i in seq(0,1,0.1)){
print(i)
}
for(i in seq(0,1,0.1)){
print(i)
cleanFix %>% filter(Prob == i) -> tmp
lin %>% filter(x == i) -> val
print(i)
print(val)
print(unique(tmp$Prob))
#for(k in 1:length(tmp$FixationTime)){
#print(tmp[k,]$FixationTime)
#print(tmp[k,]$FixationTime)
#  if(tmp[k,]$FixationTime >= val$y){
#    tmpout <- cbind(tmp[k,], data.frame(group="Late"))
#  } else{
#    tmpout <- cbind(tmp[k,], data.frame(group="Early"))
#  }
#  out <- rbind(out, tmpRow)
#}
}
for(i in seq(0,1,0.1)){
print(i)
tmp <- subset(cleanFix, cleanFix$Prob==i)
lin %>% filter(x == i) -> val
print(i)
print(val)
print(unique(tmp$Prob))
#for(k in 1:length(tmp$FixationTime)){
#print(tmp[k,]$FixationTime)
#print(tmp[k,]$FixationTime)
#  if(tmp[k,]$FixationTime >= val$y){
#    tmpout <- cbind(tmp[k,], data.frame(group="Late"))
#  } else{
#    tmpout <- cbind(tmp[k,], data.frame(group="Early"))
#  }
#  out <- rbind(out, tmpRow)
#}
}
View(cleanFix)
out <- data.frame(matrix(0,nrow=0,ncol=length(colnames(cleanFix))+1))
colnames(out) <- c(colnames(cleanFix),"Group")
cleanFix$Prob
for(i in seq(0,1,0.1)){
print(i)
tmp <- subset(cleanFix, cleanFix$Prob==i)
lin %>% filter(x == i) -> val
#print(val)
print(unique(tmp$Prob))
#for(k in 1:length(tmp$FixationTime)){
#print(tmp[k,]$FixationTime)
#print(tmp[k,]$FixationTime)
#  if(tmp[k,]$FixationTime >= val$y){
#    tmpout <- cbind(tmp[k,], data.frame(group="Late"))
#  } else{
#    tmpout <- cbind(tmp[k,], data.frame(group="Early"))
#  }
#  out <- rbind(out, tmpRow)
#}
}
subset(cleanFix, cleanFix$Prob==0.3)
for(i in seq(0,1,0.1)){
print(i)
tmp <- subset(cleanFix, as.numeric(cleanFix$Prob)==as.numeric(i))
lin %>% filter(x == i) -> val
#print(val)
print(unique(tmp$Prob))
#for(k in 1:length(tmp$FixationTime)){
#print(tmp[k,]$FixationTime)
#print(tmp[k,]$FixationTime)
#  if(tmp[k,]$FixationTime >= val$y){
#    tmpout <- cbind(tmp[k,], data.frame(group="Late"))
#  } else{
#    tmpout <- cbind(tmp[k,], data.frame(group="Early"))
#  }
#  out <- rbind(out, tmpRow)
#}
}
cleanFix$Prob
for(i in seq(0,1,0.1)){
print(i)
tmp <- subset(cleanFix, as.numeric(cleanFix$Prob)==as.numeric(i))
lin %>% filter(x == i) -> val
#print(val)
print((tmp$Prob))
#for(k in 1:length(tmp$FixationTime)){
#print(tmp[k,]$FixationTime)
#print(tmp[k,]$FixationTime)
#  if(tmp[k,]$FixationTime >= val$y){
#    tmpout <- cbind(tmp[k,], data.frame(group="Late"))
#  } else{
#    tmpout <- cbind(tmp[k,], data.frame(group="Early"))
#  }
#  out <- rbind(out, tmpRow)
#}
}
for(i in seq(0,1,0.1)){
print(i)
tmp <- subset(cleanFix, as.numeric(cleanFix$Prob)==as.numeric(i))
}
for(i in seq(0,1,0.1)){
print(i)
tmp <- subset(cleanFix, as.numeric(cleanFix$Prob)==as.numeric(i))
print(unique(tmp$Prob))
}
cleanFix
sort(unique(cleanFix$Prob))
t <- sort(unique(cleanFix$Prob))
t
typeof(t)
t[4]
typeof(t[4])
